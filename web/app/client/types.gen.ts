// This file is auto-generated by @hey-api/openapi-ts

/**
 * Application schema
 */
export type Application = {
    createdAt: string;
    description: string;
    error?: string;
    id: string;
    name: string;
    services: Array<{
        createdAt: string;
        environment: {
            [key: string]: string;
        };
        error?: string;
        id: string;
        image: string;
        labels: {
            [key: string]: string;
        };
        name: string;
        ports: {
            [key: string]: string;
        };
        serviceName: string;
        status: 'running' | 'stopped' | 'starting' | 'stopping' | 'error';
        updatedAt: string;
    }>;
    status: 'running' | 'stopped' | 'starting' | 'stopping' | 'error';
    updatedAt: string;
};

/**
 * ApplicationStatusChangedMessage schema
 */
export type ApplicationStatusChangedMessage = {
    error?: string;
    id: string;
    status: 'running' | 'stopped' | 'starting' | 'stopping' | 'error';
};

/**
 * CreateApplicationRequest schema
 */
export type CreateApplicationRequest = {
    description?: string;
    name?: string;
    services?: Array<{
        entrypoint: string;
        environment: {
            [key: string]: string;
        };
        image: string;
        labels: {
            [key: string]: string;
        };
        name: string;
        ports: {
            [key: string]: string;
        };
    }>;
    start?: boolean;
};

/**
 * HTTPError schema
 */
export type HttpError = {
    /**
     * Human readable error message
     */
    detail?: string;
    errors?: Array<{
        /**
         * Additional information about the error
         */
        more?: {
            [key: string]: unknown;
        };
        /**
         * For example, name of the parameter that caused the error
         */
        name?: string;
        /**
         * Human readable error message
         */
        reason?: string;
    }>;
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * Short title of the error
     */
    title?: string;
    /**
     * URL of the error type. Can be used to lookup the error in a documentation
     */
    type?: string;
};

/**
 * InvalidateResult schema
 */
export type InvalidateResult = {
    ok?: boolean;
};

/**
 * LoginRequest schema
 */
export type LoginRequest = {
    password?: string;
    username?: string;
};

/**
 * LoginResult schema
 */
export type LoginResult = {
    accessToken?: string;
    accessTokenExpiresAt?: string;
    refreshToken?: string;
    refreshTokenExpiresAt?: string;
    user?: {
        createdAt?: string;
        id?: string;
        name?: string;
        tokenVersion?: number;
        updatedAt?: string;
    };
};

/**
 * RefreshRequest schema
 */
export type RefreshRequest = {
    refreshToken?: string;
};

/**
 * RefreshResult schema
 */
export type RefreshResult = {
    accessToken?: string;
    accessTokenExpiresAt?: string;
};

/**
 * RegisterRequest schema
 */
export type RegisterRequest = {
    password?: string;
    username?: string;
};

/**
 * RegisterResult schema
 */
export type RegisterResult = {
    accessToken?: string;
    accessTokenExpiresAt?: string;
    refreshToken?: string;
    refreshTokenExpiresAt?: string;
    user?: {
        createdAt?: string;
        id?: string;
        name?: string;
        tokenVersion?: number;
        updatedAt?: string;
    };
};

/**
 * unknown-interface schema
 */
export type UnknownInterface = unknown;

export type GetApplicationsData = {
    body?: never;
    headers?: {
        Accept?: string;
    };
    path?: never;
    query?: never;
    url: '/applications/';
};

export type GetApplicationsErrors = {
    /**
     * Bad Request _(validation or deserialization error)_
     */
    400: HttpError;
    /**
     * Internal Server Error _(panics)_
     */
    500: HttpError;
    default: unknown;
};

export type GetApplicationsError = GetApplicationsErrors[keyof GetApplicationsErrors];

export type GetApplicationsResponses = {
    /**
     * OK
     */
    200: Array<Application>;
};

export type GetApplicationsResponse = GetApplicationsResponses[keyof GetApplicationsResponses];

export type CreateApplicationData = {
    /**
     * Request body for controller.CreateApplicationRequest
     */
    body: CreateApplicationRequest;
    headers?: {
        Accept?: string;
    };
    path?: never;
    query?: never;
    url: '/applications/';
};

export type CreateApplicationErrors = {
    /**
     * Bad Request _(validation or deserialization error)_
     */
    400: HttpError;
    /**
     * Internal Server Error _(panics)_
     */
    500: HttpError;
    default: unknown;
};

export type CreateApplicationError = CreateApplicationErrors[keyof CreateApplicationErrors];

export type CreateApplicationResponses = {
    /**
     * OK
     */
    200: Application;
};

export type CreateApplicationResponse = CreateApplicationResponses[keyof CreateApplicationResponses];

export type GetApplicationEventsData = {
    body?: never;
    headers?: {
        Accept?: string;
    };
    path?: never;
    query?: never;
    url: '/applications/events';
};

export type GetApplicationEventsErrors = {
    /**
     * Bad Request _(validation or deserialization error)_
     */
    400: HttpError;
    /**
     * Internal Server Error _(panics)_
     */
    500: HttpError;
    default: unknown;
};

export type GetApplicationEventsError = GetApplicationEventsErrors[keyof GetApplicationEventsErrors];

export type GetApplicationEventsResponses = {
    /**
     * OK
     */
    200: ApplicationStatusChangedMessage;
};

export type GetApplicationEventsResponse = GetApplicationEventsResponses[keyof GetApplicationEventsResponses];

export type DeleteApplicationData = {
    body?: never;
    headers?: {
        Accept?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/applications/{id}';
};

export type DeleteApplicationErrors = {
    /**
     * Bad Request _(validation or deserialization error)_
     */
    400: HttpError;
    /**
     * Internal Server Error _(panics)_
     */
    500: HttpError;
    default: unknown;
};

export type DeleteApplicationError = DeleteApplicationErrors[keyof DeleteApplicationErrors];

export type DeleteApplicationResponses = {
    /**
     * OK
     */
    200: Application;
};

export type DeleteApplicationResponse = DeleteApplicationResponses[keyof DeleteApplicationResponses];

export type GetApplicationData = {
    body?: never;
    headers?: {
        Accept?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/applications/{id}';
};

export type GetApplicationErrors = {
    /**
     * Bad Request _(validation or deserialization error)_
     */
    400: HttpError;
    /**
     * Internal Server Error _(panics)_
     */
    500: HttpError;
    default: unknown;
};

export type GetApplicationError = GetApplicationErrors[keyof GetApplicationErrors];

export type GetApplicationResponses = {
    /**
     * OK
     */
    200: Application;
};

export type GetApplicationResponse = GetApplicationResponses[keyof GetApplicationResponses];

export type StartApplicationData = {
    body?: never;
    headers?: {
        Accept?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/applications/{id}/start';
};

export type StartApplicationErrors = {
    /**
     * Bad Request _(validation or deserialization error)_
     */
    400: HttpError;
    /**
     * Internal Server Error _(panics)_
     */
    500: HttpError;
    default: unknown;
};

export type StartApplicationError = StartApplicationErrors[keyof StartApplicationErrors];

export type StartApplicationResponses = {
    /**
     * OK
     */
    200: Application;
};

export type StartApplicationResponse = StartApplicationResponses[keyof StartApplicationResponses];

export type StopApplicationData = {
    body?: never;
    headers?: {
        Accept?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/applications/{id}/stop';
};

export type StopApplicationErrors = {
    /**
     * Bad Request _(validation or deserialization error)_
     */
    400: HttpError;
    /**
     * Internal Server Error _(panics)_
     */
    500: HttpError;
    default: unknown;
};

export type StopApplicationError = StopApplicationErrors[keyof StopApplicationErrors];

export type StopApplicationResponses = {
    /**
     * OK
     */
    200: Application;
};

export type StopApplicationResponse = StopApplicationResponses[keyof StopApplicationResponses];

export type InvalidateData = {
    body?: never;
    headers?: {
        Accept?: string;
    };
    path?: never;
    query?: never;
    url: '/auth/invalidate';
};

export type InvalidateErrors = {
    /**
     * Bad Request _(validation or deserialization error)_
     */
    400: HttpError;
    /**
     * Internal Server Error _(panics)_
     */
    500: HttpError;
    default: unknown;
};

export type InvalidateError = InvalidateErrors[keyof InvalidateErrors];

export type InvalidateResponses = {
    /**
     * OK
     */
    200: InvalidateResult;
};

export type InvalidateResponse = InvalidateResponses[keyof InvalidateResponses];

export type LoginData = {
    /**
     * Request body for controller.LoginRequest
     */
    body: LoginRequest;
    headers?: {
        Accept?: string;
    };
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type LoginErrors = {
    /**
     * Bad Request _(validation or deserialization error)_
     */
    400: HttpError;
    /**
     * Internal Server Error _(panics)_
     */
    500: HttpError;
    default: unknown;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
    /**
     * OK
     */
    200: LoginResult;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type RefreshData = {
    /**
     * Request body for controller.RefreshRequest
     */
    body: RefreshRequest;
    headers?: {
        Accept?: string;
    };
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type RefreshErrors = {
    /**
     * Bad Request _(validation or deserialization error)_
     */
    400: HttpError;
    /**
     * Internal Server Error _(panics)_
     */
    500: HttpError;
    default: unknown;
};

export type RefreshError = RefreshErrors[keyof RefreshErrors];

export type RefreshResponses = {
    /**
     * OK
     */
    200: RefreshResult;
};

export type RefreshResponse = RefreshResponses[keyof RefreshResponses];

export type RegisterData = {
    /**
     * Request body for controller.RegisterRequest
     */
    body: RegisterRequest;
    headers?: {
        Accept?: string;
    };
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterErrors = {
    /**
     * Bad Request _(validation or deserialization error)_
     */
    400: HttpError;
    /**
     * Internal Server Error _(panics)_
     */
    500: HttpError;
    default: unknown;
};

export type RegisterError = RegisterErrors[keyof RegisterErrors];

export type RegisterResponses = {
    /**
     * OK
     */
    200: RegisterResult;
};

export type RegisterResponse = RegisterResponses[keyof RegisterResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:9999' | (string & {});
};