// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Composable, TDataShape, Client } from './client';
import type { GetApplicationsData, GetApplicationsResponse, GetApplicationsError, CreateApplicationData, CreateApplicationResponse, CreateApplicationError, GetApplicationEventsData, GetApplicationEventsResponse, GetApplicationEventsError, DeleteApplicationData, DeleteApplicationResponse, DeleteApplicationError, GetApplicationData, GetApplicationResponse, GetApplicationError, StartApplicationData, StartApplicationResponse, StartApplicationError, StopApplicationData, StopApplicationResponse, StopApplicationError, InvalidateData, InvalidateResponse, InvalidateError, LoginData, LoginResponse, LoginError, RefreshData, RefreshResponse, RefreshError, RegisterData, RegisterResponse, RegisterError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TComposable extends Composable, TData extends TDataShape = TDataShape, ResT = unknown, DefaultT = undefined> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * get all
 * #### Controller:
 *
 * `github.com/servling/servling/pkg/http/controller.(*ApplicationController).GetAll`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 *
 */
export const getApplications = <TComposable extends Composable, DefaultT extends GetApplicationsResponse = GetApplicationsResponse>(options: Options<TComposable, GetApplicationsData, GetApplicationsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetApplicationsResponse | DefaultT, GetApplicationsError, DefaultT>({
        url: '/applications/',
        ...options
    });
};

/**
 * create
 * #### Controller:
 *
 * `github.com/servling/servling/pkg/http/controller.(*ApplicationController).Create`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 *
 */
export const createApplication = <TComposable extends Composable, DefaultT extends CreateApplicationResponse = CreateApplicationResponse>(options: Options<TComposable, CreateApplicationData, CreateApplicationResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, CreateApplicationResponse | DefaultT, CreateApplicationError, DefaultT>({
        url: '/applications/',
        ...options,
        headers: {
            'Content-Type': '*/*',
            ...options.headers
        }
    });
};

/**
 * events
 * #### Controller:
 *
 * `github.com/servling/servling/pkg/http/controller.(*ApplicationController).Events`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 *
 */
export const getApplicationEvents = <TComposable extends Composable, DefaultT extends GetApplicationEventsResponse = GetApplicationEventsResponse>(options: Options<TComposable, GetApplicationEventsData, GetApplicationEventsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetApplicationEventsResponse | DefaultT, GetApplicationEventsError, DefaultT>({
        url: '/applications/events',
        ...options
    });
};

/**
 * delete
 * #### Controller:
 *
 * `github.com/servling/servling/pkg/http/controller.(*ApplicationController).Delete`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 *
 */
export const deleteApplication = <TComposable extends Composable, DefaultT extends DeleteApplicationResponse = DeleteApplicationResponse>(options: Options<TComposable, DeleteApplicationData, DeleteApplicationResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, DeleteApplicationResponse | DefaultT, DeleteApplicationError, DefaultT>({
        url: '/applications/{id}',
        ...options
    });
};

/**
 * get
 * #### Controller:
 *
 * `github.com/servling/servling/pkg/http/controller.(*ApplicationController).Get`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 *
 */
export const getApplication = <TComposable extends Composable, DefaultT extends GetApplicationResponse = GetApplicationResponse>(options: Options<TComposable, GetApplicationData, GetApplicationResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetApplicationResponse | DefaultT, GetApplicationError, DefaultT>({
        url: '/applications/{id}',
        ...options
    });
};

/**
 * start
 * #### Controller:
 *
 * `github.com/servling/servling/pkg/http/controller.(*ApplicationController).Start`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 *
 */
export const startApplication = <TComposable extends Composable, DefaultT extends StartApplicationResponse = StartApplicationResponse>(options: Options<TComposable, StartApplicationData, StartApplicationResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, StartApplicationResponse | DefaultT, StartApplicationError, DefaultT>({
        url: '/applications/{id}/start',
        ...options
    });
};

/**
 * stop
 * #### Controller:
 *
 * `github.com/servling/servling/pkg/http/controller.(*ApplicationController).Stop`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 *
 */
export const stopApplication = <TComposable extends Composable, DefaultT extends StopApplicationResponse = StopApplicationResponse>(options: Options<TComposable, StopApplicationData, StopApplicationResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, StopApplicationResponse | DefaultT, StopApplicationError, DefaultT>({
        url: '/applications/{id}/stop',
        ...options
    });
};

/**
 * invalidate
 * #### Controller:
 *
 * `github.com/servling/servling/pkg/http/controller.(*AuthController).Invalidate`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 *
 */
export const invalidate = <TComposable extends Composable, DefaultT extends InvalidateResponse = InvalidateResponse>(options: Options<TComposable, InvalidateData, InvalidateResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, InvalidateResponse | DefaultT, InvalidateError, DefaultT>({
        url: '/auth/invalidate',
        ...options
    });
};

/**
 * login
 * #### Controller:
 *
 * `github.com/servling/servling/pkg/http/controller.(*AuthController).Login`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 *
 */
export const login = <TComposable extends Composable, DefaultT extends LoginResponse = LoginResponse>(options: Options<TComposable, LoginData, LoginResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, LoginResponse | DefaultT, LoginError, DefaultT>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': '*/*',
            ...options.headers
        }
    });
};

/**
 * refresh
 * #### Controller:
 *
 * `github.com/servling/servling/pkg/http/controller.(*AuthController).Refresh`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 *
 */
export const refresh = <TComposable extends Composable, DefaultT extends RefreshResponse = RefreshResponse>(options: Options<TComposable, RefreshData, RefreshResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, RefreshResponse | DefaultT, RefreshError, DefaultT>({
        url: '/auth/refresh',
        ...options,
        headers: {
            'Content-Type': '*/*',
            ...options.headers
        }
    });
};

/**
 * register
 * #### Controller:
 *
 * `github.com/servling/servling/pkg/http/controller.(*AuthController).Register`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 *
 */
export const register = <TComposable extends Composable, DefaultT extends RegisterResponse = RegisterResponse>(options: Options<TComposable, RegisterData, RegisterResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, RegisterResponse | DefaultT, RegisterError, DefaultT>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': '*/*',
            ...options.headers
        }
    });
};