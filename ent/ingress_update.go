// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/servling/servling/ent/domain"
	"github.com/servling/servling/ent/ingress"
	"github.com/servling/servling/ent/predicate"
	"github.com/servling/servling/ent/service"
)

// IngressUpdate is the builder for updating Ingress entities.
type IngressUpdate struct {
	config
	hooks    []Hook
	mutation *IngressMutation
}

// Where appends a list predicates to the IngressUpdate builder.
func (iu *IngressUpdate) Where(ps ...predicate.Ingress) *IngressUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *IngressUpdate) SetName(s string) *IngressUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *IngressUpdate) SetNillableName(s *string) *IngressUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetTargetPort sets the "target_port" field.
func (iu *IngressUpdate) SetTargetPort(u uint16) *IngressUpdate {
	iu.mutation.ResetTargetPort()
	iu.mutation.SetTargetPort(u)
	return iu
}

// SetNillableTargetPort sets the "target_port" field if the given value is not nil.
func (iu *IngressUpdate) SetNillableTargetPort(u *uint16) *IngressUpdate {
	if u != nil {
		iu.SetTargetPort(*u)
	}
	return iu
}

// AddTargetPort adds u to the "target_port" field.
func (iu *IngressUpdate) AddTargetPort(u int16) *IngressUpdate {
	iu.mutation.AddTargetPort(u)
	return iu
}

// SetDomainID sets the "domain" edge to the Domain entity by ID.
func (iu *IngressUpdate) SetDomainID(id string) *IngressUpdate {
	iu.mutation.SetDomainID(id)
	return iu
}

// SetNillableDomainID sets the "domain" edge to the Domain entity by ID if the given value is not nil.
func (iu *IngressUpdate) SetNillableDomainID(id *string) *IngressUpdate {
	if id != nil {
		iu = iu.SetDomainID(*id)
	}
	return iu
}

// SetDomain sets the "domain" edge to the Domain entity.
func (iu *IngressUpdate) SetDomain(d *Domain) *IngressUpdate {
	return iu.SetDomainID(d.ID)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (iu *IngressUpdate) SetServiceID(id string) *IngressUpdate {
	iu.mutation.SetServiceID(id)
	return iu
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (iu *IngressUpdate) SetNillableServiceID(id *string) *IngressUpdate {
	if id != nil {
		iu = iu.SetServiceID(*id)
	}
	return iu
}

// SetService sets the "service" edge to the Service entity.
func (iu *IngressUpdate) SetService(s *Service) *IngressUpdate {
	return iu.SetServiceID(s.ID)
}

// Mutation returns the IngressMutation object of the builder.
func (iu *IngressUpdate) Mutation() *IngressMutation {
	return iu.mutation
}

// ClearDomain clears the "domain" edge to the Domain entity.
func (iu *IngressUpdate) ClearDomain() *IngressUpdate {
	iu.mutation.ClearDomain()
	return iu
}

// ClearService clears the "service" edge to the Service entity.
func (iu *IngressUpdate) ClearService() *IngressUpdate {
	iu.mutation.ClearService()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IngressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IngressUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IngressUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IngressUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *IngressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ingress.Table, ingress.Columns, sqlgraph.NewFieldSpec(ingress.FieldID, field.TypeString))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(ingress.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.TargetPort(); ok {
		_spec.SetField(ingress.FieldTargetPort, field.TypeUint16, value)
	}
	if value, ok := iu.mutation.AddedTargetPort(); ok {
		_spec.AddField(ingress.FieldTargetPort, field.TypeUint16, value)
	}
	if iu.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ingress.DomainTable,
			Columns: []string{ingress.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ingress.DomainTable,
			Columns: []string{ingress.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ingress.ServiceTable,
			Columns: []string{ingress.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ingress.ServiceTable,
			Columns: []string{ingress.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ingress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IngressUpdateOne is the builder for updating a single Ingress entity.
type IngressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IngressMutation
}

// SetName sets the "name" field.
func (iuo *IngressUpdateOne) SetName(s string) *IngressUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *IngressUpdateOne) SetNillableName(s *string) *IngressUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetTargetPort sets the "target_port" field.
func (iuo *IngressUpdateOne) SetTargetPort(u uint16) *IngressUpdateOne {
	iuo.mutation.ResetTargetPort()
	iuo.mutation.SetTargetPort(u)
	return iuo
}

// SetNillableTargetPort sets the "target_port" field if the given value is not nil.
func (iuo *IngressUpdateOne) SetNillableTargetPort(u *uint16) *IngressUpdateOne {
	if u != nil {
		iuo.SetTargetPort(*u)
	}
	return iuo
}

// AddTargetPort adds u to the "target_port" field.
func (iuo *IngressUpdateOne) AddTargetPort(u int16) *IngressUpdateOne {
	iuo.mutation.AddTargetPort(u)
	return iuo
}

// SetDomainID sets the "domain" edge to the Domain entity by ID.
func (iuo *IngressUpdateOne) SetDomainID(id string) *IngressUpdateOne {
	iuo.mutation.SetDomainID(id)
	return iuo
}

// SetNillableDomainID sets the "domain" edge to the Domain entity by ID if the given value is not nil.
func (iuo *IngressUpdateOne) SetNillableDomainID(id *string) *IngressUpdateOne {
	if id != nil {
		iuo = iuo.SetDomainID(*id)
	}
	return iuo
}

// SetDomain sets the "domain" edge to the Domain entity.
func (iuo *IngressUpdateOne) SetDomain(d *Domain) *IngressUpdateOne {
	return iuo.SetDomainID(d.ID)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (iuo *IngressUpdateOne) SetServiceID(id string) *IngressUpdateOne {
	iuo.mutation.SetServiceID(id)
	return iuo
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (iuo *IngressUpdateOne) SetNillableServiceID(id *string) *IngressUpdateOne {
	if id != nil {
		iuo = iuo.SetServiceID(*id)
	}
	return iuo
}

// SetService sets the "service" edge to the Service entity.
func (iuo *IngressUpdateOne) SetService(s *Service) *IngressUpdateOne {
	return iuo.SetServiceID(s.ID)
}

// Mutation returns the IngressMutation object of the builder.
func (iuo *IngressUpdateOne) Mutation() *IngressMutation {
	return iuo.mutation
}

// ClearDomain clears the "domain" edge to the Domain entity.
func (iuo *IngressUpdateOne) ClearDomain() *IngressUpdateOne {
	iuo.mutation.ClearDomain()
	return iuo
}

// ClearService clears the "service" edge to the Service entity.
func (iuo *IngressUpdateOne) ClearService() *IngressUpdateOne {
	iuo.mutation.ClearService()
	return iuo
}

// Where appends a list predicates to the IngressUpdate builder.
func (iuo *IngressUpdateOne) Where(ps ...predicate.Ingress) *IngressUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IngressUpdateOne) Select(field string, fields ...string) *IngressUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Ingress entity.
func (iuo *IngressUpdateOne) Save(ctx context.Context) (*Ingress, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IngressUpdateOne) SaveX(ctx context.Context) *Ingress {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IngressUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IngressUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *IngressUpdateOne) sqlSave(ctx context.Context) (_node *Ingress, err error) {
	_spec := sqlgraph.NewUpdateSpec(ingress.Table, ingress.Columns, sqlgraph.NewFieldSpec(ingress.FieldID, field.TypeString))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ingress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ingress.FieldID)
		for _, f := range fields {
			if !ingress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ingress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(ingress.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.TargetPort(); ok {
		_spec.SetField(ingress.FieldTargetPort, field.TypeUint16, value)
	}
	if value, ok := iuo.mutation.AddedTargetPort(); ok {
		_spec.AddField(ingress.FieldTargetPort, field.TypeUint16, value)
	}
	if iuo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ingress.DomainTable,
			Columns: []string{ingress.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ingress.DomainTable,
			Columns: []string{ingress.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ingress.ServiceTable,
			Columns: []string{ingress.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ingress.ServiceTable,
			Columns: []string{ingress.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ingress{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ingress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
