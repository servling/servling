// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/servling/servling/ent/domain"
	"github.com/servling/servling/ent/ingress"
	"github.com/servling/servling/ent/service"
)

// IngressCreate is the builder for creating a Ingress entity.
type IngressCreate struct {
	config
	mutation *IngressMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ic *IngressCreate) SetName(s string) *IngressCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetTargetPort sets the "target_port" field.
func (ic *IngressCreate) SetTargetPort(u uint16) *IngressCreate {
	ic.mutation.SetTargetPort(u)
	return ic
}

// SetID sets the "id" field.
func (ic *IngressCreate) SetID(s string) *IngressCreate {
	ic.mutation.SetID(s)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *IngressCreate) SetNillableID(s *string) *IngressCreate {
	if s != nil {
		ic.SetID(*s)
	}
	return ic
}

// SetDomainID sets the "domain" edge to the Domain entity by ID.
func (ic *IngressCreate) SetDomainID(id string) *IngressCreate {
	ic.mutation.SetDomainID(id)
	return ic
}

// SetNillableDomainID sets the "domain" edge to the Domain entity by ID if the given value is not nil.
func (ic *IngressCreate) SetNillableDomainID(id *string) *IngressCreate {
	if id != nil {
		ic = ic.SetDomainID(*id)
	}
	return ic
}

// SetDomain sets the "domain" edge to the Domain entity.
func (ic *IngressCreate) SetDomain(d *Domain) *IngressCreate {
	return ic.SetDomainID(d.ID)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (ic *IngressCreate) SetServiceID(id string) *IngressCreate {
	ic.mutation.SetServiceID(id)
	return ic
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (ic *IngressCreate) SetNillableServiceID(id *string) *IngressCreate {
	if id != nil {
		ic = ic.SetServiceID(*id)
	}
	return ic
}

// SetService sets the "service" edge to the Service entity.
func (ic *IngressCreate) SetService(s *Service) *IngressCreate {
	return ic.SetServiceID(s.ID)
}

// Mutation returns the IngressMutation object of the builder.
func (ic *IngressCreate) Mutation() *IngressMutation {
	return ic.mutation
}

// Save creates the Ingress in the database.
func (ic *IngressCreate) Save(ctx context.Context) (*Ingress, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IngressCreate) SaveX(ctx context.Context) *Ingress {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IngressCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IngressCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IngressCreate) defaults() {
	if _, ok := ic.mutation.ID(); !ok {
		v := ingress.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IngressCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Ingress.name"`)}
	}
	if _, ok := ic.mutation.TargetPort(); !ok {
		return &ValidationError{Name: "target_port", err: errors.New(`ent: missing required field "Ingress.target_port"`)}
	}
	return nil
}

func (ic *IngressCreate) sqlSave(ctx context.Context) (*Ingress, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Ingress.ID type: %T", _spec.ID.Value)
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IngressCreate) createSpec() (*Ingress, *sqlgraph.CreateSpec) {
	var (
		_node = &Ingress{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(ingress.Table, sqlgraph.NewFieldSpec(ingress.FieldID, field.TypeString))
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(ingress.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.TargetPort(); ok {
		_spec.SetField(ingress.FieldTargetPort, field.TypeUint16, value)
		_node.TargetPort = value
	}
	if nodes := ic.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ingress.DomainTable,
			Columns: []string{ingress.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.domain_ingresses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ingress.ServiceTable,
			Columns: []string{ingress.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_ingresses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ingress.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IngressUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ic *IngressCreate) OnConflict(opts ...sql.ConflictOption) *IngressUpsertOne {
	ic.conflict = opts
	return &IngressUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ingress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *IngressCreate) OnConflictColumns(columns ...string) *IngressUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &IngressUpsertOne{
		create: ic,
	}
}

type (
	// IngressUpsertOne is the builder for "upsert"-ing
	//  one Ingress node.
	IngressUpsertOne struct {
		create *IngressCreate
	}

	// IngressUpsert is the "OnConflict" setter.
	IngressUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *IngressUpsert) SetName(v string) *IngressUpsert {
	u.Set(ingress.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IngressUpsert) UpdateName() *IngressUpsert {
	u.SetExcluded(ingress.FieldName)
	return u
}

// SetTargetPort sets the "target_port" field.
func (u *IngressUpsert) SetTargetPort(v uint16) *IngressUpsert {
	u.Set(ingress.FieldTargetPort, v)
	return u
}

// UpdateTargetPort sets the "target_port" field to the value that was provided on create.
func (u *IngressUpsert) UpdateTargetPort() *IngressUpsert {
	u.SetExcluded(ingress.FieldTargetPort)
	return u
}

// AddTargetPort adds v to the "target_port" field.
func (u *IngressUpsert) AddTargetPort(v uint16) *IngressUpsert {
	u.Add(ingress.FieldTargetPort, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Ingress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ingress.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IngressUpsertOne) UpdateNewValues() *IngressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ingress.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ingress.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IngressUpsertOne) Ignore() *IngressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IngressUpsertOne) DoNothing() *IngressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IngressCreate.OnConflict
// documentation for more info.
func (u *IngressUpsertOne) Update(set func(*IngressUpsert)) *IngressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IngressUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *IngressUpsertOne) SetName(v string) *IngressUpsertOne {
	return u.Update(func(s *IngressUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IngressUpsertOne) UpdateName() *IngressUpsertOne {
	return u.Update(func(s *IngressUpsert) {
		s.UpdateName()
	})
}

// SetTargetPort sets the "target_port" field.
func (u *IngressUpsertOne) SetTargetPort(v uint16) *IngressUpsertOne {
	return u.Update(func(s *IngressUpsert) {
		s.SetTargetPort(v)
	})
}

// AddTargetPort adds v to the "target_port" field.
func (u *IngressUpsertOne) AddTargetPort(v uint16) *IngressUpsertOne {
	return u.Update(func(s *IngressUpsert) {
		s.AddTargetPort(v)
	})
}

// UpdateTargetPort sets the "target_port" field to the value that was provided on create.
func (u *IngressUpsertOne) UpdateTargetPort() *IngressUpsertOne {
	return u.Update(func(s *IngressUpsert) {
		s.UpdateTargetPort()
	})
}

// Exec executes the query.
func (u *IngressUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IngressCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IngressUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IngressUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IngressUpsertOne.ID is not supported by MySQL driver. Use IngressUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IngressUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IngressCreateBulk is the builder for creating many Ingress entities in bulk.
type IngressCreateBulk struct {
	config
	err      error
	builders []*IngressCreate
	conflict []sql.ConflictOption
}

// Save creates the Ingress entities in the database.
func (icb *IngressCreateBulk) Save(ctx context.Context) ([]*Ingress, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Ingress, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IngressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IngressCreateBulk) SaveX(ctx context.Context) []*Ingress {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IngressCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IngressCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ingress.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IngressUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (icb *IngressCreateBulk) OnConflict(opts ...sql.ConflictOption) *IngressUpsertBulk {
	icb.conflict = opts
	return &IngressUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ingress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *IngressCreateBulk) OnConflictColumns(columns ...string) *IngressUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &IngressUpsertBulk{
		create: icb,
	}
}

// IngressUpsertBulk is the builder for "upsert"-ing
// a bulk of Ingress nodes.
type IngressUpsertBulk struct {
	create *IngressCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Ingress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ingress.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IngressUpsertBulk) UpdateNewValues() *IngressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ingress.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ingress.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IngressUpsertBulk) Ignore() *IngressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IngressUpsertBulk) DoNothing() *IngressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IngressCreateBulk.OnConflict
// documentation for more info.
func (u *IngressUpsertBulk) Update(set func(*IngressUpsert)) *IngressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IngressUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *IngressUpsertBulk) SetName(v string) *IngressUpsertBulk {
	return u.Update(func(s *IngressUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IngressUpsertBulk) UpdateName() *IngressUpsertBulk {
	return u.Update(func(s *IngressUpsert) {
		s.UpdateName()
	})
}

// SetTargetPort sets the "target_port" field.
func (u *IngressUpsertBulk) SetTargetPort(v uint16) *IngressUpsertBulk {
	return u.Update(func(s *IngressUpsert) {
		s.SetTargetPort(v)
	})
}

// AddTargetPort adds v to the "target_port" field.
func (u *IngressUpsertBulk) AddTargetPort(v uint16) *IngressUpsertBulk {
	return u.Update(func(s *IngressUpsert) {
		s.AddTargetPort(v)
	})
}

// UpdateTargetPort sets the "target_port" field to the value that was provided on create.
func (u *IngressUpsertBulk) UpdateTargetPort() *IngressUpsertBulk {
	return u.Update(func(s *IngressUpsert) {
		s.UpdateTargetPort()
	})
}

// Exec executes the query.
func (u *IngressUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IngressCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IngressCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IngressUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
