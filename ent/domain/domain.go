// Code generated by ent, DO NOT EDIT.

package domain

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the domain type in the database.
	Label = "domain"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCertificate holds the string denoting the certificate field in the database.
	FieldCertificate = "certificate"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldCloudflareEmail holds the string denoting the cloudflare_email field in the database.
	FieldCloudflareEmail = "cloudflare_email"
	// FieldCloudflareAPIKey holds the string denoting the cloudflare_api_key field in the database.
	FieldCloudflareAPIKey = "cloudflare_api_key"
	// EdgeIngresses holds the string denoting the ingresses edge name in mutations.
	EdgeIngresses = "ingresses"
	// Table holds the table name of the domain in the database.
	Table = "domains"
	// IngressesTable is the table that holds the ingresses relation/edge.
	IngressesTable = "ingresses"
	// IngressesInverseTable is the table name for the Ingress entity.
	// It exists in this package in order to avoid circular dependency with the "ingress" package.
	IngressesInverseTable = "ingresses"
	// IngressesColumn is the table column denoting the ingresses relation/edge.
	IngressesColumn = "domain_ingresses"
)

// Columns holds all SQL columns for domain fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCertificate,
	FieldKey,
	FieldCloudflareEmail,
	FieldCloudflareAPIKey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Domain queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCertificate orders the results by the certificate field.
func ByCertificate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertificate, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByCloudflareEmail orders the results by the cloudflare_email field.
func ByCloudflareEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCloudflareEmail, opts...).ToFunc()
}

// ByCloudflareAPIKey orders the results by the cloudflare_api_key field.
func ByCloudflareAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCloudflareAPIKey, opts...).ToFunc()
}

// ByIngressesCount orders the results by ingresses count.
func ByIngressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIngressesStep(), opts...)
	}
}

// ByIngresses orders the results by ingresses terms.
func ByIngresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIngressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIngressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IngressesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IngressesTable, IngressesColumn),
	)
}
