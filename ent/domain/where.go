// Code generated by ent, DO NOT EDIT.

package domain

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/servling/servling/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldName, v))
}

// Certificate applies equality check predicate on the "certificate" field. It's identical to CertificateEQ.
func Certificate(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCertificate, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldKey, v))
}

// CloudflareEmail applies equality check predicate on the "cloudflare_email" field. It's identical to CloudflareEmailEQ.
func CloudflareEmail(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCloudflareEmail, v))
}

// CloudflareAPIKey applies equality check predicate on the "cloudflare_api_key" field. It's identical to CloudflareAPIKeyEQ.
func CloudflareAPIKey(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCloudflareAPIKey, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldName, v))
}

// CertificateEQ applies the EQ predicate on the "certificate" field.
func CertificateEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCertificate, v))
}

// CertificateNEQ applies the NEQ predicate on the "certificate" field.
func CertificateNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldCertificate, v))
}

// CertificateIn applies the In predicate on the "certificate" field.
func CertificateIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldCertificate, vs...))
}

// CertificateNotIn applies the NotIn predicate on the "certificate" field.
func CertificateNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldCertificate, vs...))
}

// CertificateGT applies the GT predicate on the "certificate" field.
func CertificateGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldCertificate, v))
}

// CertificateGTE applies the GTE predicate on the "certificate" field.
func CertificateGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldCertificate, v))
}

// CertificateLT applies the LT predicate on the "certificate" field.
func CertificateLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldCertificate, v))
}

// CertificateLTE applies the LTE predicate on the "certificate" field.
func CertificateLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldCertificate, v))
}

// CertificateContains applies the Contains predicate on the "certificate" field.
func CertificateContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldCertificate, v))
}

// CertificateHasPrefix applies the HasPrefix predicate on the "certificate" field.
func CertificateHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldCertificate, v))
}

// CertificateHasSuffix applies the HasSuffix predicate on the "certificate" field.
func CertificateHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldCertificate, v))
}

// CertificateIsNil applies the IsNil predicate on the "certificate" field.
func CertificateIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldCertificate))
}

// CertificateNotNil applies the NotNil predicate on the "certificate" field.
func CertificateNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldCertificate))
}

// CertificateEqualFold applies the EqualFold predicate on the "certificate" field.
func CertificateEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldCertificate, v))
}

// CertificateContainsFold applies the ContainsFold predicate on the "certificate" field.
func CertificateContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldCertificate, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldKey, v))
}

// KeyIsNil applies the IsNil predicate on the "key" field.
func KeyIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldKey))
}

// KeyNotNil applies the NotNil predicate on the "key" field.
func KeyNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldKey))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldKey, v))
}

// CloudflareEmailEQ applies the EQ predicate on the "cloudflare_email" field.
func CloudflareEmailEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCloudflareEmail, v))
}

// CloudflareEmailNEQ applies the NEQ predicate on the "cloudflare_email" field.
func CloudflareEmailNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldCloudflareEmail, v))
}

// CloudflareEmailIn applies the In predicate on the "cloudflare_email" field.
func CloudflareEmailIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldCloudflareEmail, vs...))
}

// CloudflareEmailNotIn applies the NotIn predicate on the "cloudflare_email" field.
func CloudflareEmailNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldCloudflareEmail, vs...))
}

// CloudflareEmailGT applies the GT predicate on the "cloudflare_email" field.
func CloudflareEmailGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldCloudflareEmail, v))
}

// CloudflareEmailGTE applies the GTE predicate on the "cloudflare_email" field.
func CloudflareEmailGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldCloudflareEmail, v))
}

// CloudflareEmailLT applies the LT predicate on the "cloudflare_email" field.
func CloudflareEmailLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldCloudflareEmail, v))
}

// CloudflareEmailLTE applies the LTE predicate on the "cloudflare_email" field.
func CloudflareEmailLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldCloudflareEmail, v))
}

// CloudflareEmailContains applies the Contains predicate on the "cloudflare_email" field.
func CloudflareEmailContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldCloudflareEmail, v))
}

// CloudflareEmailHasPrefix applies the HasPrefix predicate on the "cloudflare_email" field.
func CloudflareEmailHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldCloudflareEmail, v))
}

// CloudflareEmailHasSuffix applies the HasSuffix predicate on the "cloudflare_email" field.
func CloudflareEmailHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldCloudflareEmail, v))
}

// CloudflareEmailIsNil applies the IsNil predicate on the "cloudflare_email" field.
func CloudflareEmailIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldCloudflareEmail))
}

// CloudflareEmailNotNil applies the NotNil predicate on the "cloudflare_email" field.
func CloudflareEmailNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldCloudflareEmail))
}

// CloudflareEmailEqualFold applies the EqualFold predicate on the "cloudflare_email" field.
func CloudflareEmailEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldCloudflareEmail, v))
}

// CloudflareEmailContainsFold applies the ContainsFold predicate on the "cloudflare_email" field.
func CloudflareEmailContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldCloudflareEmail, v))
}

// CloudflareAPIKeyEQ applies the EQ predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCloudflareAPIKey, v))
}

// CloudflareAPIKeyNEQ applies the NEQ predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldCloudflareAPIKey, v))
}

// CloudflareAPIKeyIn applies the In predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldCloudflareAPIKey, vs...))
}

// CloudflareAPIKeyNotIn applies the NotIn predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldCloudflareAPIKey, vs...))
}

// CloudflareAPIKeyGT applies the GT predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldCloudflareAPIKey, v))
}

// CloudflareAPIKeyGTE applies the GTE predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldCloudflareAPIKey, v))
}

// CloudflareAPIKeyLT applies the LT predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldCloudflareAPIKey, v))
}

// CloudflareAPIKeyLTE applies the LTE predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldCloudflareAPIKey, v))
}

// CloudflareAPIKeyContains applies the Contains predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldCloudflareAPIKey, v))
}

// CloudflareAPIKeyHasPrefix applies the HasPrefix predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldCloudflareAPIKey, v))
}

// CloudflareAPIKeyHasSuffix applies the HasSuffix predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldCloudflareAPIKey, v))
}

// CloudflareAPIKeyIsNil applies the IsNil predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldCloudflareAPIKey))
}

// CloudflareAPIKeyNotNil applies the NotNil predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldCloudflareAPIKey))
}

// CloudflareAPIKeyEqualFold applies the EqualFold predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldCloudflareAPIKey, v))
}

// CloudflareAPIKeyContainsFold applies the ContainsFold predicate on the "cloudflare_api_key" field.
func CloudflareAPIKeyContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldCloudflareAPIKey, v))
}

// HasIngresses applies the HasEdge predicate on the "ingresses" edge.
func HasIngresses() predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IngressesTable, IngressesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIngressesWith applies the HasEdge predicate on the "ingresses" edge with a given conditions (other predicates).
func HasIngressesWith(preds ...predicate.Ingress) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := newIngressesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Domain) predicate.Domain {
	return predicate.Domain(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Domain) predicate.Domain {
	return predicate.Domain(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Domain) predicate.Domain {
	return predicate.Domain(sql.NotPredicates(p))
}
