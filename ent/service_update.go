// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/servling/servling/ent/application"
	"github.com/servling/servling/ent/predicate"
	"github.com/servling/servling/ent/service"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// Where appends a list predicates to the ServiceUpdate builder.
func (su *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *ServiceUpdate) SetName(s string) *ServiceUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableName(s *string) *ServiceUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetServiceName sets the "service_name" field.
func (su *ServiceUpdate) SetServiceName(s string) *ServiceUpdate {
	su.mutation.SetServiceName(s)
	return su
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableServiceName(s *string) *ServiceUpdate {
	if s != nil {
		su.SetServiceName(*s)
	}
	return su
}

// SetImage sets the "image" field.
func (su *ServiceUpdate) SetImage(s string) *ServiceUpdate {
	su.mutation.SetImage(s)
	return su
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableImage(s *string) *ServiceUpdate {
	if s != nil {
		su.SetImage(*s)
	}
	return su
}

// SetPorts sets the "ports" field.
func (su *ServiceUpdate) SetPorts(m map[string]string) *ServiceUpdate {
	su.mutation.SetPorts(m)
	return su
}

// ClearPorts clears the value of the "ports" field.
func (su *ServiceUpdate) ClearPorts() *ServiceUpdate {
	su.mutation.ClearPorts()
	return su
}

// SetEnvironment sets the "environment" field.
func (su *ServiceUpdate) SetEnvironment(m map[string]string) *ServiceUpdate {
	su.mutation.SetEnvironment(m)
	return su
}

// ClearEnvironment clears the value of the "environment" field.
func (su *ServiceUpdate) ClearEnvironment() *ServiceUpdate {
	su.mutation.ClearEnvironment()
	return su
}

// SetEntrypoint sets the "entrypoint" field.
func (su *ServiceUpdate) SetEntrypoint(s string) *ServiceUpdate {
	su.mutation.SetEntrypoint(s)
	return su
}

// SetNillableEntrypoint sets the "entrypoint" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableEntrypoint(s *string) *ServiceUpdate {
	if s != nil {
		su.SetEntrypoint(*s)
	}
	return su
}

// ClearEntrypoint clears the value of the "entrypoint" field.
func (su *ServiceUpdate) ClearEntrypoint() *ServiceUpdate {
	su.mutation.ClearEntrypoint()
	return su
}

// SetLabels sets the "labels" field.
func (su *ServiceUpdate) SetLabels(m map[string]string) *ServiceUpdate {
	su.mutation.SetLabels(m)
	return su
}

// ClearLabels clears the value of the "labels" field.
func (su *ServiceUpdate) ClearLabels() *ServiceUpdate {
	su.mutation.ClearLabels()
	return su
}

// SetStatus sets the "status" field.
func (su *ServiceUpdate) SetStatus(s string) *ServiceUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableStatus(s *string) *ServiceUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetError sets the "error" field.
func (su *ServiceUpdate) SetError(s string) *ServiceUpdate {
	su.mutation.SetError(s)
	return su
}

// SetNillableError sets the "error" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableError(s *string) *ServiceUpdate {
	if s != nil {
		su.SetError(*s)
	}
	return su
}

// ClearError clears the value of the "error" field.
func (su *ServiceUpdate) ClearError() *ServiceUpdate {
	su.mutation.ClearError()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ServiceUpdate) SetUpdatedAt(t time.Time) *ServiceUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetApplicationID sets the "application" edge to the Application entity by ID.
func (su *ServiceUpdate) SetApplicationID(id string) *ServiceUpdate {
	su.mutation.SetApplicationID(id)
	return su
}

// SetNillableApplicationID sets the "application" edge to the Application entity by ID if the given value is not nil.
func (su *ServiceUpdate) SetNillableApplicationID(id *string) *ServiceUpdate {
	if id != nil {
		su = su.SetApplicationID(*id)
	}
	return su
}

// SetApplication sets the "application" edge to the Application entity.
func (su *ServiceUpdate) SetApplication(a *Application) *ServiceUpdate {
	return su.SetApplicationID(a.ID)
}

// Mutation returns the ServiceMutation object of the builder.
func (su *ServiceUpdate) Mutation() *ServiceMutation {
	return su.mutation
}

// ClearApplication clears the "application" edge to the Application entity.
func (su *ServiceUpdate) ClearApplication() *ServiceUpdate {
	su.mutation.ClearApplication()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServiceUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ServiceUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := service.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *ServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.ServiceName(); ok {
		_spec.SetField(service.FieldServiceName, field.TypeString, value)
	}
	if value, ok := su.mutation.Image(); ok {
		_spec.SetField(service.FieldImage, field.TypeString, value)
	}
	if value, ok := su.mutation.Ports(); ok {
		_spec.SetField(service.FieldPorts, field.TypeJSON, value)
	}
	if su.mutation.PortsCleared() {
		_spec.ClearField(service.FieldPorts, field.TypeJSON)
	}
	if value, ok := su.mutation.Environment(); ok {
		_spec.SetField(service.FieldEnvironment, field.TypeJSON, value)
	}
	if su.mutation.EnvironmentCleared() {
		_spec.ClearField(service.FieldEnvironment, field.TypeJSON)
	}
	if value, ok := su.mutation.Entrypoint(); ok {
		_spec.SetField(service.FieldEntrypoint, field.TypeString, value)
	}
	if su.mutation.EntrypointCleared() {
		_spec.ClearField(service.FieldEntrypoint, field.TypeString)
	}
	if value, ok := su.mutation.Labels(); ok {
		_spec.SetField(service.FieldLabels, field.TypeJSON, value)
	}
	if su.mutation.LabelsCleared() {
		_spec.ClearField(service.FieldLabels, field.TypeJSON)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(service.FieldStatus, field.TypeString, value)
	}
	if value, ok := su.mutation.Error(); ok {
		_spec.SetField(service.FieldError, field.TypeString, value)
	}
	if su.mutation.ErrorCleared() {
		_spec.ClearField(service.FieldError, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(service.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.ApplicationTable,
			Columns: []string{service.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.ApplicationTable,
			Columns: []string{service.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceMutation
}

// SetName sets the "name" field.
func (suo *ServiceUpdateOne) SetName(s string) *ServiceUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableName(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetServiceName sets the "service_name" field.
func (suo *ServiceUpdateOne) SetServiceName(s string) *ServiceUpdateOne {
	suo.mutation.SetServiceName(s)
	return suo
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableServiceName(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetServiceName(*s)
	}
	return suo
}

// SetImage sets the "image" field.
func (suo *ServiceUpdateOne) SetImage(s string) *ServiceUpdateOne {
	suo.mutation.SetImage(s)
	return suo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableImage(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetImage(*s)
	}
	return suo
}

// SetPorts sets the "ports" field.
func (suo *ServiceUpdateOne) SetPorts(m map[string]string) *ServiceUpdateOne {
	suo.mutation.SetPorts(m)
	return suo
}

// ClearPorts clears the value of the "ports" field.
func (suo *ServiceUpdateOne) ClearPorts() *ServiceUpdateOne {
	suo.mutation.ClearPorts()
	return suo
}

// SetEnvironment sets the "environment" field.
func (suo *ServiceUpdateOne) SetEnvironment(m map[string]string) *ServiceUpdateOne {
	suo.mutation.SetEnvironment(m)
	return suo
}

// ClearEnvironment clears the value of the "environment" field.
func (suo *ServiceUpdateOne) ClearEnvironment() *ServiceUpdateOne {
	suo.mutation.ClearEnvironment()
	return suo
}

// SetEntrypoint sets the "entrypoint" field.
func (suo *ServiceUpdateOne) SetEntrypoint(s string) *ServiceUpdateOne {
	suo.mutation.SetEntrypoint(s)
	return suo
}

// SetNillableEntrypoint sets the "entrypoint" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableEntrypoint(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetEntrypoint(*s)
	}
	return suo
}

// ClearEntrypoint clears the value of the "entrypoint" field.
func (suo *ServiceUpdateOne) ClearEntrypoint() *ServiceUpdateOne {
	suo.mutation.ClearEntrypoint()
	return suo
}

// SetLabels sets the "labels" field.
func (suo *ServiceUpdateOne) SetLabels(m map[string]string) *ServiceUpdateOne {
	suo.mutation.SetLabels(m)
	return suo
}

// ClearLabels clears the value of the "labels" field.
func (suo *ServiceUpdateOne) ClearLabels() *ServiceUpdateOne {
	suo.mutation.ClearLabels()
	return suo
}

// SetStatus sets the "status" field.
func (suo *ServiceUpdateOne) SetStatus(s string) *ServiceUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableStatus(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetError sets the "error" field.
func (suo *ServiceUpdateOne) SetError(s string) *ServiceUpdateOne {
	suo.mutation.SetError(s)
	return suo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableError(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetError(*s)
	}
	return suo
}

// ClearError clears the value of the "error" field.
func (suo *ServiceUpdateOne) ClearError() *ServiceUpdateOne {
	suo.mutation.ClearError()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ServiceUpdateOne) SetUpdatedAt(t time.Time) *ServiceUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetApplicationID sets the "application" edge to the Application entity by ID.
func (suo *ServiceUpdateOne) SetApplicationID(id string) *ServiceUpdateOne {
	suo.mutation.SetApplicationID(id)
	return suo
}

// SetNillableApplicationID sets the "application" edge to the Application entity by ID if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableApplicationID(id *string) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetApplicationID(*id)
	}
	return suo
}

// SetApplication sets the "application" edge to the Application entity.
func (suo *ServiceUpdateOne) SetApplication(a *Application) *ServiceUpdateOne {
	return suo.SetApplicationID(a.ID)
}

// Mutation returns the ServiceMutation object of the builder.
func (suo *ServiceUpdateOne) Mutation() *ServiceMutation {
	return suo.mutation
}

// ClearApplication clears the "application" edge to the Application entity.
func (suo *ServiceUpdateOne) ClearApplication() *ServiceUpdateOne {
	suo.mutation.ClearApplication()
	return suo
}

// Where appends a list predicates to the ServiceUpdate builder.
func (suo *ServiceUpdateOne) Where(ps ...predicate.Service) *ServiceUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServiceUpdateOne) Select(field string, fields ...string) *ServiceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Service entity.
func (suo *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ServiceUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := service.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *ServiceUpdateOne) sqlSave(ctx context.Context) (_node *Service, err error) {
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Service.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, service.FieldID)
		for _, f := range fields {
			if !service.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != service.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.ServiceName(); ok {
		_spec.SetField(service.FieldServiceName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Image(); ok {
		_spec.SetField(service.FieldImage, field.TypeString, value)
	}
	if value, ok := suo.mutation.Ports(); ok {
		_spec.SetField(service.FieldPorts, field.TypeJSON, value)
	}
	if suo.mutation.PortsCleared() {
		_spec.ClearField(service.FieldPorts, field.TypeJSON)
	}
	if value, ok := suo.mutation.Environment(); ok {
		_spec.SetField(service.FieldEnvironment, field.TypeJSON, value)
	}
	if suo.mutation.EnvironmentCleared() {
		_spec.ClearField(service.FieldEnvironment, field.TypeJSON)
	}
	if value, ok := suo.mutation.Entrypoint(); ok {
		_spec.SetField(service.FieldEntrypoint, field.TypeString, value)
	}
	if suo.mutation.EntrypointCleared() {
		_spec.ClearField(service.FieldEntrypoint, field.TypeString)
	}
	if value, ok := suo.mutation.Labels(); ok {
		_spec.SetField(service.FieldLabels, field.TypeJSON, value)
	}
	if suo.mutation.LabelsCleared() {
		_spec.ClearField(service.FieldLabels, field.TypeJSON)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(service.FieldStatus, field.TypeString, value)
	}
	if value, ok := suo.mutation.Error(); ok {
		_spec.SetField(service.FieldError, field.TypeString, value)
	}
	if suo.mutation.ErrorCleared() {
		_spec.ClearField(service.FieldError, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(service.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.ApplicationTable,
			Columns: []string{service.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.ApplicationTable,
			Columns: []string{service.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Service{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
