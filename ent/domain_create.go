// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/servling/servling/ent/domain"
	"github.com/servling/servling/ent/ingress"
)

// DomainCreate is the builder for creating a Domain entity.
type DomainCreate struct {
	config
	mutation *DomainMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (dc *DomainCreate) SetName(s string) *DomainCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetCertificate sets the "certificate" field.
func (dc *DomainCreate) SetCertificate(s string) *DomainCreate {
	dc.mutation.SetCertificate(s)
	return dc
}

// SetNillableCertificate sets the "certificate" field if the given value is not nil.
func (dc *DomainCreate) SetNillableCertificate(s *string) *DomainCreate {
	if s != nil {
		dc.SetCertificate(*s)
	}
	return dc
}

// SetKey sets the "key" field.
func (dc *DomainCreate) SetKey(s string) *DomainCreate {
	dc.mutation.SetKey(s)
	return dc
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (dc *DomainCreate) SetNillableKey(s *string) *DomainCreate {
	if s != nil {
		dc.SetKey(*s)
	}
	return dc
}

// SetCloudflareEmail sets the "cloudflare_email" field.
func (dc *DomainCreate) SetCloudflareEmail(s string) *DomainCreate {
	dc.mutation.SetCloudflareEmail(s)
	return dc
}

// SetNillableCloudflareEmail sets the "cloudflare_email" field if the given value is not nil.
func (dc *DomainCreate) SetNillableCloudflareEmail(s *string) *DomainCreate {
	if s != nil {
		dc.SetCloudflareEmail(*s)
	}
	return dc
}

// SetCloudflareAPIKey sets the "cloudflare_api_key" field.
func (dc *DomainCreate) SetCloudflareAPIKey(s string) *DomainCreate {
	dc.mutation.SetCloudflareAPIKey(s)
	return dc
}

// SetNillableCloudflareAPIKey sets the "cloudflare_api_key" field if the given value is not nil.
func (dc *DomainCreate) SetNillableCloudflareAPIKey(s *string) *DomainCreate {
	if s != nil {
		dc.SetCloudflareAPIKey(*s)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DomainCreate) SetID(s string) *DomainCreate {
	dc.mutation.SetID(s)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DomainCreate) SetNillableID(s *string) *DomainCreate {
	if s != nil {
		dc.SetID(*s)
	}
	return dc
}

// AddIngressIDs adds the "ingresses" edge to the Ingress entity by IDs.
func (dc *DomainCreate) AddIngressIDs(ids ...string) *DomainCreate {
	dc.mutation.AddIngressIDs(ids...)
	return dc
}

// AddIngresses adds the "ingresses" edges to the Ingress entity.
func (dc *DomainCreate) AddIngresses(i ...*Ingress) *DomainCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return dc.AddIngressIDs(ids...)
}

// Mutation returns the DomainMutation object of the builder.
func (dc *DomainCreate) Mutation() *DomainMutation {
	return dc.mutation
}

// Save creates the Domain in the database.
func (dc *DomainCreate) Save(ctx context.Context) (*Domain, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DomainCreate) SaveX(ctx context.Context) *Domain {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DomainCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DomainCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DomainCreate) defaults() {
	if _, ok := dc.mutation.ID(); !ok {
		v := domain.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DomainCreate) check() error {
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Domain.name"`)}
	}
	return nil
}

func (dc *DomainCreate) sqlSave(ctx context.Context) (*Domain, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Domain.ID type: %T", _spec.ID.Value)
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DomainCreate) createSpec() (*Domain, *sqlgraph.CreateSpec) {
	var (
		_node = &Domain{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(domain.Table, sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(domain.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Certificate(); ok {
		_spec.SetField(domain.FieldCertificate, field.TypeString, value)
		_node.Certificate = &value
	}
	if value, ok := dc.mutation.Key(); ok {
		_spec.SetField(domain.FieldKey, field.TypeString, value)
		_node.Key = &value
	}
	if value, ok := dc.mutation.CloudflareEmail(); ok {
		_spec.SetField(domain.FieldCloudflareEmail, field.TypeString, value)
		_node.CloudflareEmail = &value
	}
	if value, ok := dc.mutation.CloudflareAPIKey(); ok {
		_spec.SetField(domain.FieldCloudflareAPIKey, field.TypeString, value)
		_node.CloudflareAPIKey = &value
	}
	if nodes := dc.mutation.IngressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   domain.IngressesTable,
			Columns: []string{domain.IngressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Domain.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DomainUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (dc *DomainCreate) OnConflict(opts ...sql.ConflictOption) *DomainUpsertOne {
	dc.conflict = opts
	return &DomainUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DomainCreate) OnConflictColumns(columns ...string) *DomainUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DomainUpsertOne{
		create: dc,
	}
}

type (
	// DomainUpsertOne is the builder for "upsert"-ing
	//  one Domain node.
	DomainUpsertOne struct {
		create *DomainCreate
	}

	// DomainUpsert is the "OnConflict" setter.
	DomainUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *DomainUpsert) SetName(v string) *DomainUpsert {
	u.Set(domain.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DomainUpsert) UpdateName() *DomainUpsert {
	u.SetExcluded(domain.FieldName)
	return u
}

// SetCertificate sets the "certificate" field.
func (u *DomainUpsert) SetCertificate(v string) *DomainUpsert {
	u.Set(domain.FieldCertificate, v)
	return u
}

// UpdateCertificate sets the "certificate" field to the value that was provided on create.
func (u *DomainUpsert) UpdateCertificate() *DomainUpsert {
	u.SetExcluded(domain.FieldCertificate)
	return u
}

// ClearCertificate clears the value of the "certificate" field.
func (u *DomainUpsert) ClearCertificate() *DomainUpsert {
	u.SetNull(domain.FieldCertificate)
	return u
}

// SetKey sets the "key" field.
func (u *DomainUpsert) SetKey(v string) *DomainUpsert {
	u.Set(domain.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DomainUpsert) UpdateKey() *DomainUpsert {
	u.SetExcluded(domain.FieldKey)
	return u
}

// ClearKey clears the value of the "key" field.
func (u *DomainUpsert) ClearKey() *DomainUpsert {
	u.SetNull(domain.FieldKey)
	return u
}

// SetCloudflareEmail sets the "cloudflare_email" field.
func (u *DomainUpsert) SetCloudflareEmail(v string) *DomainUpsert {
	u.Set(domain.FieldCloudflareEmail, v)
	return u
}

// UpdateCloudflareEmail sets the "cloudflare_email" field to the value that was provided on create.
func (u *DomainUpsert) UpdateCloudflareEmail() *DomainUpsert {
	u.SetExcluded(domain.FieldCloudflareEmail)
	return u
}

// ClearCloudflareEmail clears the value of the "cloudflare_email" field.
func (u *DomainUpsert) ClearCloudflareEmail() *DomainUpsert {
	u.SetNull(domain.FieldCloudflareEmail)
	return u
}

// SetCloudflareAPIKey sets the "cloudflare_api_key" field.
func (u *DomainUpsert) SetCloudflareAPIKey(v string) *DomainUpsert {
	u.Set(domain.FieldCloudflareAPIKey, v)
	return u
}

// UpdateCloudflareAPIKey sets the "cloudflare_api_key" field to the value that was provided on create.
func (u *DomainUpsert) UpdateCloudflareAPIKey() *DomainUpsert {
	u.SetExcluded(domain.FieldCloudflareAPIKey)
	return u
}

// ClearCloudflareAPIKey clears the value of the "cloudflare_api_key" field.
func (u *DomainUpsert) ClearCloudflareAPIKey() *DomainUpsert {
	u.SetNull(domain.FieldCloudflareAPIKey)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(domain.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DomainUpsertOne) UpdateNewValues() *DomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(domain.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Domain.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DomainUpsertOne) Ignore() *DomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DomainUpsertOne) DoNothing() *DomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DomainCreate.OnConflict
// documentation for more info.
func (u *DomainUpsertOne) Update(set func(*DomainUpsert)) *DomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DomainUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DomainUpsertOne) SetName(v string) *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DomainUpsertOne) UpdateName() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateName()
	})
}

// SetCertificate sets the "certificate" field.
func (u *DomainUpsertOne) SetCertificate(v string) *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.SetCertificate(v)
	})
}

// UpdateCertificate sets the "certificate" field to the value that was provided on create.
func (u *DomainUpsertOne) UpdateCertificate() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateCertificate()
	})
}

// ClearCertificate clears the value of the "certificate" field.
func (u *DomainUpsertOne) ClearCertificate() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.ClearCertificate()
	})
}

// SetKey sets the "key" field.
func (u *DomainUpsertOne) SetKey(v string) *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DomainUpsertOne) UpdateKey() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *DomainUpsertOne) ClearKey() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.ClearKey()
	})
}

// SetCloudflareEmail sets the "cloudflare_email" field.
func (u *DomainUpsertOne) SetCloudflareEmail(v string) *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.SetCloudflareEmail(v)
	})
}

// UpdateCloudflareEmail sets the "cloudflare_email" field to the value that was provided on create.
func (u *DomainUpsertOne) UpdateCloudflareEmail() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateCloudflareEmail()
	})
}

// ClearCloudflareEmail clears the value of the "cloudflare_email" field.
func (u *DomainUpsertOne) ClearCloudflareEmail() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.ClearCloudflareEmail()
	})
}

// SetCloudflareAPIKey sets the "cloudflare_api_key" field.
func (u *DomainUpsertOne) SetCloudflareAPIKey(v string) *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.SetCloudflareAPIKey(v)
	})
}

// UpdateCloudflareAPIKey sets the "cloudflare_api_key" field to the value that was provided on create.
func (u *DomainUpsertOne) UpdateCloudflareAPIKey() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateCloudflareAPIKey()
	})
}

// ClearCloudflareAPIKey clears the value of the "cloudflare_api_key" field.
func (u *DomainUpsertOne) ClearCloudflareAPIKey() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.ClearCloudflareAPIKey()
	})
}

// Exec executes the query.
func (u *DomainUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DomainCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DomainUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DomainUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DomainUpsertOne.ID is not supported by MySQL driver. Use DomainUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DomainUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DomainCreateBulk is the builder for creating many Domain entities in bulk.
type DomainCreateBulk struct {
	config
	err      error
	builders []*DomainCreate
	conflict []sql.ConflictOption
}

// Save creates the Domain entities in the database.
func (dcb *DomainCreateBulk) Save(ctx context.Context) ([]*Domain, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Domain, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DomainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DomainCreateBulk) SaveX(ctx context.Context) []*Domain {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DomainCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DomainCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Domain.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DomainUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (dcb *DomainCreateBulk) OnConflict(opts ...sql.ConflictOption) *DomainUpsertBulk {
	dcb.conflict = opts
	return &DomainUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DomainCreateBulk) OnConflictColumns(columns ...string) *DomainUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DomainUpsertBulk{
		create: dcb,
	}
}

// DomainUpsertBulk is the builder for "upsert"-ing
// a bulk of Domain nodes.
type DomainUpsertBulk struct {
	create *DomainCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(domain.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DomainUpsertBulk) UpdateNewValues() *DomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(domain.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DomainUpsertBulk) Ignore() *DomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DomainUpsertBulk) DoNothing() *DomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DomainCreateBulk.OnConflict
// documentation for more info.
func (u *DomainUpsertBulk) Update(set func(*DomainUpsert)) *DomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DomainUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DomainUpsertBulk) SetName(v string) *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DomainUpsertBulk) UpdateName() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateName()
	})
}

// SetCertificate sets the "certificate" field.
func (u *DomainUpsertBulk) SetCertificate(v string) *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.SetCertificate(v)
	})
}

// UpdateCertificate sets the "certificate" field to the value that was provided on create.
func (u *DomainUpsertBulk) UpdateCertificate() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateCertificate()
	})
}

// ClearCertificate clears the value of the "certificate" field.
func (u *DomainUpsertBulk) ClearCertificate() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.ClearCertificate()
	})
}

// SetKey sets the "key" field.
func (u *DomainUpsertBulk) SetKey(v string) *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DomainUpsertBulk) UpdateKey() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *DomainUpsertBulk) ClearKey() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.ClearKey()
	})
}

// SetCloudflareEmail sets the "cloudflare_email" field.
func (u *DomainUpsertBulk) SetCloudflareEmail(v string) *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.SetCloudflareEmail(v)
	})
}

// UpdateCloudflareEmail sets the "cloudflare_email" field to the value that was provided on create.
func (u *DomainUpsertBulk) UpdateCloudflareEmail() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateCloudflareEmail()
	})
}

// ClearCloudflareEmail clears the value of the "cloudflare_email" field.
func (u *DomainUpsertBulk) ClearCloudflareEmail() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.ClearCloudflareEmail()
	})
}

// SetCloudflareAPIKey sets the "cloudflare_api_key" field.
func (u *DomainUpsertBulk) SetCloudflareAPIKey(v string) *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.SetCloudflareAPIKey(v)
	})
}

// UpdateCloudflareAPIKey sets the "cloudflare_api_key" field to the value that was provided on create.
func (u *DomainUpsertBulk) UpdateCloudflareAPIKey() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateCloudflareAPIKey()
	})
}

// ClearCloudflareAPIKey clears the value of the "cloudflare_api_key" field.
func (u *DomainUpsertBulk) ClearCloudflareAPIKey() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.ClearCloudflareAPIKey()
	})
}

// Exec executes the query.
func (u *DomainUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DomainCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DomainCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DomainUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
