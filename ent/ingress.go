// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/servling/servling/ent/domain"
	"github.com/servling/servling/ent/ingress"
	"github.com/servling/servling/ent/service"
)

// Ingress is the model entity for the Ingress schema.
type Ingress struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// TargetPort holds the value of the "target_port" field.
	TargetPort uint16 `json:"target_port,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IngressQuery when eager-loading is set.
	Edges             IngressEdges `json:"edges"`
	domain_ingresses  *string
	service_ingresses *string
	selectValues      sql.SelectValues
}

// IngressEdges holds the relations/edges for other nodes in the graph.
type IngressEdges struct {
	// Domain holds the value of the domain edge.
	Domain *Domain `json:"domain,omitempty"`
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IngressEdges) DomainOrErr() (*Domain, error) {
	if e.Domain != nil {
		return e.Domain, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: domain.Label}
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IngressEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ingress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ingress.FieldTargetPort:
			values[i] = new(sql.NullInt64)
		case ingress.FieldID, ingress.FieldName:
			values[i] = new(sql.NullString)
		case ingress.ForeignKeys[0]: // domain_ingresses
			values[i] = new(sql.NullString)
		case ingress.ForeignKeys[1]: // service_ingresses
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ingress fields.
func (i *Ingress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case ingress.FieldID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value.Valid {
				i.ID = value.String
			}
		case ingress.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case ingress.FieldTargetPort:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_port", values[j])
			} else if value.Valid {
				i.TargetPort = uint16(value.Int64)
			}
		case ingress.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain_ingresses", values[j])
			} else if value.Valid {
				i.domain_ingresses = new(string)
				*i.domain_ingresses = value.String
			}
		case ingress.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_ingresses", values[j])
			} else if value.Valid {
				i.service_ingresses = new(string)
				*i.service_ingresses = value.String
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ingress.
// This includes values selected through modifiers, order, etc.
func (i *Ingress) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryDomain queries the "domain" edge of the Ingress entity.
func (i *Ingress) QueryDomain() *DomainQuery {
	return NewIngressClient(i.config).QueryDomain(i)
}

// QueryService queries the "service" edge of the Ingress entity.
func (i *Ingress) QueryService() *ServiceQuery {
	return NewIngressClient(i.config).QueryService(i)
}

// Update returns a builder for updating this Ingress.
// Note that you need to call Ingress.Unwrap() before calling this method if this Ingress
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Ingress) Update() *IngressUpdateOne {
	return NewIngressClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Ingress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Ingress) Unwrap() *Ingress {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ingress is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Ingress) String() string {
	var builder strings.Builder
	builder.WriteString("Ingress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("target_port=")
	builder.WriteString(fmt.Sprintf("%v", i.TargetPort))
	builder.WriteByte(')')
	return builder.String()
}

// Ingresses is a parsable slice of Ingress.
type Ingresses []*Ingress
